{"version":3,"sources":["Card.jsx","Deck.jsx","App.js","serviceWorker.js","index.js"],"names":["CARD_OFFSET","x","y","a","Card","props","genPos","dx","dy","ang","style","transform","d","scale","Math","floor","random","this","name","img","src","alt","className","React","Component","API_URL","NEW_DECK","NEW_CARD","TO_REPLACE","Deck","state","deckId","cards","remaining","getNewCard","fetch","getCardUrl","response","ok","json","success","code","value","suit","image","newCard","id","setState","st","Error","deck_id","replace","cardList","map","key","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uVAGMA,G,MAAc,CAACC,EAAG,GAAIC,EAAG,GAAIC,EAAG,KAiCvBC,E,kDA7BX,WAAYC,GAAQ,IAAD,6BACf,cAAMA,IACqBC,OAAON,GAA3BO,EAFQ,EAERA,GAAIC,EAFI,EAEJA,GAAIC,EAFA,EAEAA,IAFA,OAIf,EAAKC,MAAQ,CAACC,UAAU,aAAD,OACNJ,EADM,cACEC,EADF,oCAETC,EAFS,SAJR,E,sDASA,IAAXR,EAAU,EAAVA,EAAGC,EAAO,EAAPA,EAAGC,EAAI,EAAJA,EACJS,EAAI,SAAAC,GAAK,OAAIC,KAAKC,OAAOD,KAAKE,SAAW,IAAOH,IACtD,MAAO,CAACN,GAAIK,EAAEX,GAAIO,GAAII,EAAEV,GAAIO,IAAKG,EAAET,M,+BAG7B,IAAD,EACec,KAAKZ,MAAlBa,EADF,EACEA,KAAMC,EADR,EACQA,IACPT,EAAQO,KAAKP,MAEnB,OACI,yBACIU,IAAKD,EACLE,IAAKH,EACLI,UAAU,OACVZ,MAAOA,Q,GAzBJa,IAAMC,WCDnBC,G,MAAU,CACZC,SAAU,kDACVC,SAAU,wDACVC,WAAY,gBAqFDC,E,4MA/EXC,MAAQ,CAAEC,OAAQ,GAAIC,MAAO,GAAIC,UAAW,G,EAyB5CC,W,sBAAa,4CAAA/B,EAAA,sEACYgC,MAAM,EAAKC,cADvB,YACLC,EADK,QAEIC,GAFJ,iCAGYD,EAASE,OAHrB,WAGDA,EAHC,QAIKC,QAJL,mDAM8BD,EAAKP,MAAM,GAAvCS,EANF,EAMEA,KAAMC,EANR,EAMQA,MAAOC,EANf,EAMeA,KAAMC,EANrB,EAMqBA,MAEpBC,EAAU,CACZC,GAAIL,EACJvB,KAAK,GAAD,OAAKwB,EAAL,eAAiBC,GACrBxB,IAAKyB,GAGFX,EAAaM,EAAbN,UAEP,EAAKc,UAAS,SAAAC,GAAE,MAAK,CACjBhB,MAAM,GAAD,mBAAMgB,EAAGhB,OAAT,CAAgBa,IACrBZ,gBAlBC,8BAsBC,IAAIgB,MAAM,mBAtBX,4C,wMAtBYd,MAAMV,EAAQC,U,YAA/BW,E,QACSC,G,iCACQD,EAASE,O,WAAtBA,E,QACMC,Q,iDAEHU,EAAsBX,EAAtBW,QAASjB,EAAaM,EAAbN,UAEhBhB,KAAK8B,SAAS,CACVhB,OAAQmB,EACRjB,c,8BAIE,IAAIgB,MAAM,wB,0IAIV,IACHlB,EAAUd,KAAKa,MAAfC,OACP,OAAON,EAAQE,SAASwB,QAAQ1B,EAAQG,WAAYG,K,+BA6B9C,IAAD,EACsBd,KAAKa,MAAzBG,EADF,EACEA,UACDmB,EAFD,EACapB,MACKqB,KAAI,gBAAEP,EAAF,EAAEA,GAAI5B,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,IAAZ,OACvB,kBAAC,EAAD,CACImC,IAAQR,EACR5B,KAAQA,EACRC,IAAQA,OAIhB,OACI,yBAAKG,UAAU,SACRW,EAAY,GACX,4BACIX,UAAU,WACViC,QAAStC,KAAKiB,YAFlB,iBAOJ,yBAAKZ,UAAU,SACV8B,Q,GA1EF7B,IAAMC,W,MCCVgC,MARf,WACE,OACE,oCACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ddef63e4.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Card.css\";\r\n\r\nconst CARD_OFFSET = {x: 15, y: 15, a: 45};\r\n\r\nclass Card extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const {dx, dy, ang} = this.genPos(CARD_OFFSET);\r\n\r\n        this.style = {transform: \r\n            `translate(${dx}%, ${dy}%) \r\n             rotate(${ang}deg)`};\r\n    }\r\n        \r\n    genPos({x, y, a}) {\r\n        const d = scale => Math.floor((Math.random() - 0.5) * scale);\r\n        return {dx: d(x), dy: d(y), ang: d(a)};\r\n    }\r\n\r\n    render() {\r\n        const {name, img} = this.props;\r\n        const style = this.style;\r\n\r\n        return (\r\n            <img \r\n                src={img} \r\n                alt={name} \r\n                className=\"Card\" \r\n                style={style} \r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from \"./Card\";\r\nimport \"./Deck.css\";\r\n\r\nconst API_URL = {\r\n    NEW_DECK: \"https://deckofcardsapi.com/api/deck/new/shuffle\",\r\n    NEW_CARD: \"https://deckofcardsapi.com/api/deck/<<deck_id>>/draw/\",\r\n    TO_REPLACE: \"<<deck_id>>\"\r\n};\r\n\r\n\r\nclass Deck extends React.Component {\r\n\r\n    state = { deckId: \"\", cards: [], remaining: 0}\r\n\r\n    async componentDidMount() {\r\n        let response = await fetch(API_URL.NEW_DECK);\r\n        if (response.ok) {\r\n            let json = await response.json();\r\n            if (!json.success) return;\r\n\r\n            const {deck_id, remaining} = json;\r\n\r\n            this.setState({\r\n                deckId: deck_id, \r\n                remaining,\r\n            });\r\n\r\n        } else {\r\n            throw new Error(\"Can't brand new deck\");\r\n        }\r\n    }\r\n\r\n    getCardUrl() {\r\n        const {deckId} = this.state;\r\n        return API_URL.NEW_CARD.replace(API_URL.TO_REPLACE, deckId);\r\n    }\r\n\r\n    getNewCard = async () => {\r\n        let response = await fetch(this.getCardUrl());\r\n        if (response.ok) {\r\n            let json = await response.json();\r\n            if (!json.success) return;\r\n\r\n            const {code, value, suit, image} = json.cards[0];\r\n\r\n            const newCard = {\r\n                id: code, \r\n                name: `${value} OF ${suit}`, \r\n                img: image,\r\n            };\r\n\r\n            const {remaining} = json;\r\n\r\n            this.setState(st => ({\r\n                cards: [...st.cards, newCard],\r\n                remaining,\r\n            }))\r\n\r\n        } else {\r\n            throw new Error(\"Can't load card\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {remaining, cards} = this.state;\r\n        const cardList = cards.map(({id, name, img}) => (\r\n            <Card \r\n                key =  {id} \r\n                name = {name} \r\n                img =  {img}\r\n            />\r\n        ))\r\n\r\n        return (\r\n            <div className=\"Deck\">\r\n                {(+remaining > 0) && \r\n                    <button \r\n                        className=\"Deck-btn\" \r\n                        onClick={this.getNewCard}\r\n                    >\r\n                        Gimme a card!\r\n                    </button>\r\n                }\r\n                <div className=\"cards\">\r\n                    {cardList}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Deck;","import React from 'react';\nimport Deck from \"./Deck\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <Deck />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}